#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2021-2022 Citadel and contributors
#
# SPDX-License-Identifier: GPL-3.0-or-later

import json
import os
import re
import shutil
import subprocess
import sys
from binascii import hexlify
from os import urandom
from time import sleep

import yaml


def generate_password(size):
    """Create size byte hex salt"""
    return hexlify(urandom(size)).decode()

# Print an error if the user isn't running on Linux.
if sys.platform != 'linux':
    print('This script only works on Linux!')
    exit(1)

# Print an error if user is not root
if os.getuid() != 0:
  print('This script must be run as root!')
  exit(1)

# Check if the system is arm64 or amd64
is_arm64 = subprocess.check_output(['uname', '-m']).decode('utf-8').strip() == 'aarch64'
is_amd64 = subprocess.check_output(['uname', '-m']).decode('utf-8').strip() == 'x86_64'

if not is_arm64 and not is_amd64:
  print('Citadel only works on arm64 and amd64!')
  exit(1)

dependencies = False

# Check the output of "docker compose version", if it matches "Docker Compose version v2.0.0-rc.3", return true
# Otherwise, return false
def is_compose_version_except(target_version):
  try:
    output = subprocess.check_output(['docker', 'compose', 'version'])
    if output.decode('utf-8').strip() != 'Docker Compose version {}'.format(target_version):
      return True
    else:
      return False
  except:
    return True

# Download docker-compose from GitHub and put it in $HOME/.docker/cli-plugins/docker-compose
def download_docker_compose():
  # Skip if os.path.expanduser('~/.docker/cli-plugins/docker-compose') exists
  subprocess.check_call(["mkdir", "-p", os.path.expanduser('~/.docker/cli-plugins/')])
  if is_arm64:
    compose_arch = 'aarch64'
  elif is_amd64:
    compose_arch = 'x86_64'
  # We validate that no other case than the two above can happen before

  if is_compose_version_except(dependencies['compose']):
    print("Docker compose not found or not required version, updating.")
    compose_url = 'https://github.com/docker/compose/releases/download/{}/docker-compose-linux-{}'.format(dependencies['compose'], compose_arch)
    compose_file = os.path.expanduser('~/.docker/cli-plugins/docker-compose')
    subprocess.check_call(['wget', compose_url, '-O', compose_file])
    os.chmod(compose_file, 0o755)
  

if not shutil.which("wget"):
    print('Wget is not installed!')
    exit(1)

if not shutil.which("docker"):
    print('Docker is not installed!')
    exit(1)

# Switch to node root directory.
NIRVATI_ROOT=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.chdir(NIRVATI_ROOT)

with open("./db/dependencies.yml", "r") as file: 
  dependencies = yaml.safe_load(file)

DEVICE_IP=os.environ.get("DEVICE_IP")


with open(os.path.join(NIRVATI_ROOT, "info.json"), 'r') as file:
  CITADEL_VERSION=json.load(file)['version']

status_dir = os.path.join(NIRVATI_ROOT, 'statuses')

print("\n======================================")
if os.path.isfile(status_dir+'/configured'):
  print("=========== RECONFIGURING ============")
  reconfiguring=os.path.isfile('./.env')
else:
  print("============ CONFIGURING =============")
  reconfiguring=False

print("============== CITADEL  ==============")
print("======================================\n")

# Parse a dotenv file
# Values can either be KEY=VALUE or KEY="VALUE" or KEY='VALUE'
# Returns all env vars as a dict
def parse_dotenv(file_path):
  envVars: dict = {}
  with open(file_path, 'r') as file:
    for line in file:
      line = line.strip()
      if line.startswith('#') or len(line) == 0:
        continue
      if '=' in line:
        key, value = line.split('=', 1)
        value = value.strip('"').strip("'")
        envVars[key] = value
      else:
        print("Error: Invalid line in {}: {}".format(file_path, line))
        print("Line should be in the format KEY=VALUE or KEY=\"VALUE\" or KEY='VALUE'")
        exit(1)
  return envVars

##########################################################
############ Generate configuration variables ############
##########################################################

CADDY_PORT=os.environ.get('CADDY_PORT') or "80"
CADDY_HTTPS_PORT=os.environ.get('CADDY_PORT') or "443"
UPDATE_CHANNEL="stable"

dotenv = False

if reconfiguring:
  dotenv=parse_dotenv('./.env')
  if 'CADDY_PORT' in dotenv:
    CADDY_PORT=dotenv['CADDY_PORT']
  CADDY_HTTPS_PORT="443"
  if 'CADDY_HTTPS_PORT' in dotenv:
    CADDY_HTTPS_PORT=dotenv['CADDY_HTTPS_PORT']
  if CADDY_HTTPS_PORT == "80" and CADDY_PORT == "80":
    CADDY_HTTPS_PORT="443"
  if 'UPDATE_CHANNEL' in dotenv and dotenv['UPDATE_CHANNEL'] != "main" and dotenv['UPDATE_CHANNEL'] != "migration":
    UPDATE_CHANNEL=dotenv['UPDATE_CHANNEL']

if dotenv and 'POSTGRES_PASSWORD' in dotenv:
  POSTGRES_PASSWORD=dotenv['POSTGRES_PASSWORD']
else:
  POSTGRES_PASSWORD=generate_password(64)

# IP addresses for services
NETWORK_IP="10.21.21.0"
GATEWAY_IP="10.21.21.1"
DASHBOARD_IP="10.21.21.3"
API_IP="10.21.21.4"
POSTGRES_IP="10.21.21.5"

DEVICE_HOSTNAME=""
try:
  DEVICE_HOSTNAME=subprocess.check_output("hostname").decode("utf-8").strip()
except:
  # The content of /etc/hostname is the device's hostname
  DEVICE_HOSTNAME=open("/etc/hostname").read().strip()

DOCKER_EXECUTABLE=subprocess.check_output(["which", "docker"]).decode("utf-8").strip()
# Get the real path by following symlinks
DOCKER_BINARY=subprocess.check_output(["readlink",  "-f", DOCKER_EXECUTABLE]).decode("utf-8").strip()

# Checks if a variable with the name exists, if not, check if an env var with the name existts
# if neither exists, then exit with an error
def get_var(var_name, other_locals, file_name):
  if var_name in locals():
    return str(locals()[var_name])
  elif var_name in other_locals:
    return str(other_locals[var_name])
  elif var_name in globals():
    return str(globals()[var_name])
  else:
    print("Error: {} is not defined! (In file {})".format(var_name, file_name))
    exit(1)

# Converts a string to uppercase, also replaces all - with _
def convert_to_upper(string):
  return string.upper().replace('-', '_')

# Put variables in the config file. A config file accesses an env var $EXAMPLE_VARIABLE by containing <example-variable>
# in the config file. Check for such occurences and replace them with the actual variable
def replace_vars(file_path):
  with open(file_path, 'r') as file:
    file_contents = file.read()
  return re.sub(r'<(.*?)>', lambda m: get_var(convert_to_upper(m.group(1)), locals(), file_path), file_contents)

def build_template(template_path, output_path):
  data = replace_vars(template_path)
  # If output path is a list, then it is a list of output paths
  if isinstance(output_path, list):
    for output_path_item in output_path:
      # Delete the output path, no matter if it's a file or a directory
      if os.path.isdir(output_path_item):
        shutil.rmtree(output_path_item)
      with open(output_path_item, 'w') as file:
        file.write(data)
  else:
    # Delete the output path, no matter if it's a file or a directory
    if os.path.isdir(output_path):
      shutil.rmtree(output_path)
    with open(output_path, 'w') as file:
      file.write(data)

print("Generating configuration files...")
build_template("./templates/.env-sample", "./.env")

print("Ensuring Docker Compose is up to date...")
download_docker_compose()

print("Updating core services...")
print()
with open("docker-compose.yml", 'r') as stream:
  compose = yaml.safe_load(stream)
for service in ["api", "dashboard", "postgres"]:
  compose["services"][service]["image"] = dependencies[service]
with open("docker-compose.yml", "w") as stream:
    yaml.dump(compose, stream, sort_keys=False)

# If NIRVATI_ROOT/db/nirvati-seed/seed does not exist, write the seed file with a random password
seed_file = os.path.join(NIRVATI_ROOT, 'db', 'nirvati-seed', 'seed')
if not os.path.exists(seed_file):
  print("Generating seed file...")
  os.makedirs(os.path.join(NIRVATI_ROOT, 'db', 'nirvati-seed'), exist_ok=True)
  with open(seed_file, 'w') as file:
    file.write(generate_password(64))

print("Configuring permissions...\n")
try:
  os.system('chown -R 1000:1000 {}'.format(NIRVATI_ROOT))
except: pass

if not reconfiguring:
  print("Downloading apps...\n")
  os.system('./scripts/app update')
else:
  print("Generating app configuration...\n")
  os.system('./scripts/app generate')

# Touch status_dir/configured
with open(status_dir+'/configured', 'w') as file:
  file.write('')

print("Configuring permissions...\n")
try:
  os.system('chown -R 1000:1000 {}'.format(NIRVATI_ROOT))
except: pass

print("Configuration successful\n")
print("You can now start Citadel by running:")
print("  sudo ./scripts/start")
